import express from 'express';
import { Server } from 'typescript-rest';
import Taxonomy from './services/re-taxonomy';
import cors from 'cors';
import OntologyAPI from './services/re-ontology';
import ServiceWizardAPI from './services/serviceWizard';
import NarrativeJobService, { JSONRPC11Exception } from './services/NarrativeJobService';
// import { JSONRPCResponse, JSONRPCError, JSONPayload } from '@kbase/ui-lib/lib/comm/GenericClient';

export interface JSONRPC2Request<T> {
    id: string;
    jsonrpc: '2.0';
    method: string;
    params: T;
}

export interface JSONRPC2Result<T> {
    id: string | null;
    jsonrpc: '2.0';
    result: T
}

export interface JSONRPC2Error {
    code: number;
    message: string;
    data: string | number | object
}

export interface JSONRPC2ErrorResult<E> {
    id: string | null;
    jsonrpc: '2.0';
    error: JSONRPC2Error
}

export type JSONRPC2Response<T> = JSONRPC2Result<T> | JSONRPC2Error;

// JSONRPC 1.1 (i.e. KBase) support

export interface JSONRPC11Request<T> {
    id: string;
    version: '1.1';
    method: string;
    params: [T]
}

export interface JSONRPC11Result<T> {
    id: string | null;
    version: '1.1';
    result: [T]
}

export interface JSONRPC11Error {
    code: number;
    name: string;
    message: string;
    error: string;
}

export interface JSONRPC11ErrorResult<E> {
    id: string | null;
    version: '1.1';
    error: JSONRPC11Error
}

export type JSONRPC11Response<T, E> = JSONRPC11Result<T> | JSONRPC11ErrorResult<E>;

const app: express.Application = express();

app.use(cors());
app.options('*', cors());
app.use(express.json());

// const taxonomy = express.Router();
// Server.loadServices(taxonomy, 'services/re-taxonomy/index');
// app.use('taxonomy', taxonomy);

// for rest api
// Server.buildServices(app, Taxonomy);

// app.route('/services/service_wizard').post((request, response) => {
//     const contentType = request.headers['content-type'];
//     if (contentType !== 'application/json') {
//         throw new Error('Invalid response: Not application/json');
//     }

//     const { version, method, id, params } = request.body;
//     console.log('service wizard?', params);
//     if (method === 'ServiceWizard.get_service_status') {
//         const rpcResponse = {
//             version: '1.1',
//             id: Date.now(),
//             result: [
//                 {
//                     git_commit_hash: 'fe9d63b10fba22000c837b45890179c338f4cfa5',
//                     status: 'active',
//                     version: '1.3.0',
//                     hash: 'fe9d63b10fba22000c837b45890179c338f4cfa5',
//                     release_tags: ['dev'],
//                     url: 'http://localhost:3001/dynservices/taxonomy-re-api',
//                     module_name: 'taxonomy_re_api',
//                     health: 'active',
//                     up: 1
//                 }
//             ]
//         };
//         response.setHeader('content-type', 'application/json');
//         response.send(JSON.stringify(rpcResponse));
//         console.log('service wizard response', rpcResponse);
//     }
// });

app.route('/services/service_wizard').post(async (request, response) => {
    const contentType = request.headers['content-type'];
    console.log('content type', contentType);
    if (contentType !== 'application/json') {
        throw new Error('Invalid response: Not application/json');
    }

    const { version, method, id, params } = request.body;

    const [methodName, functionName] = method.split('.');

    console.log('params', params);

    const api = new ServiceWizardAPI({
        upstreamURL: 'https://ci.kbase.us/services/service_wizard',
        token: 'X36XQORGSI62NTPJEE5EIGOGDXGJTWCD'
    });
    const result = await api.handle(functionName, params);
    const rpcResponse = {
        version: '1.1',
        id: Date.now(),
        result: [result]
    };
    response.setHeader('content-type', 'application/json');
    response.send(JSON.stringify(rpcResponse));
});

// app.route('/dynservices/taxonomy-re-api').post((request, response) => {
//     const contentType = request.headers['content-type'];
//     console.log('content type', contentType);
//     if (contentType !== 'application/json') {
//         throw new Error('Invalid response: Not application/json');
//     }

//     const { version, method, id, params } = request.body;

//     const [methodName, functionName] = method.split('.');

//     console.log('params', params);

//     const tax = new Taxonomy();
//     const result = tax.handle(functionName, params);
//     const rpcResponse = {
//         version: '1.1',
//         id: Date.now(),
//         result: [result]
//     };
//     response.setHeader('content-type', 'application/json');
//     response.send(JSON.stringify(rpcResponse));
// });

app.route('/dynserv/instance.OntologyAPI').post(async (request, response) => {
    const contentType = request.headers['content-type'];
    console.log('content type', contentType);
    if (contentType !== 'application/json') {
        throw new Error('Invalid response: Not application/json');
    }

    const { version, method, id, params } = request.body;

    const [methodName, functionName] = method.split('.');

    const api = new OntologyAPI();
    const result = await api.handle(functionName, params);
    const rpcResponse = {
        version: '1.1',
        id: Date.now(),
        result: [result]
    };
    response.setHeader('content-type', 'application/json');
    response.send(JSON.stringify(rpcResponse));
});

app.route('/services/NarrativeJobService').post(async (request, response) => {
    const contentType = request.headers['content-type'];
    console.log('content type', contentType);
    let rpcResponse: JSONRPC11Response<any, any>;

    try {
        if (contentType !== 'application/json') {
            rpcResponse = {
                id: null,
                version: "1.1",
                error: {
                    code: -32700,
                    message: 'Missing content type',
                    data: {
                        contentType: contentType
                    }
                }
            }
        } else {
            const { id, version, method, params } = request.body;

            if (!id) {
                rpcResponse = {
                    id: null,
                    version: "1.1",
                    error: {
                        code: -32600,
                        message: 'Invalid request - missing id',
                        data: {
                        }
                    }
                }
            } else if (!version) {
                rpcResponse = {
                    id,
                    version: "1.1",
                    error: {
                        code: -32600,
                        message: 'Invalid request - incorrect or missing version',
                        data: {
                            expectedVersion: '1.1'
                        }
                    }
                }
            } else if (version !== '1.1') {
                rpcResponse = {
                    id,
                    version: "1.1",
                    error: {
                        code: -32600,
                        message: 'Invalid request - incorrect or missing version',
                        data: {
                            expectedVersion: '1.1',
                            providedVersion: request.body.version
                        }
                    }
                }
            } else if (!method) {
                rpcResponse = {
                    id, version,
                    error: {
                        code: -32600,
                        message: 'Invalid request - incorrect or missing method',
                        data: {
                        }
                    }
                }
            } else if (!params) {
                rpcResponse = {
                    id, version,
                    error: {
                        code: -32602,
                        message: 'Invalid params - missing',
                        data: {
                            "description": "No params were provided"
                        }
                    }
                }
            } else if (!(params instanceof Array)) {
                rpcResponse = {
                    id, version,
                    error: {
                        code: -32602,
                        message: 'Invalid params - not array',
                        data: {
                            "description": "The params must be provided as an Array"
                        }
                    }
                }
            } else {
                // TODO: common sense validation of the request structure and values.

                const [moduleName, functionName] = method.split('.');

                if (moduleName !== 'NarrativeJobService') {
                    rpcResponse = {
                        id, version,
                        error: {
                            code: -32601,
                            message: 'Method not found - wrong module',
                            data: {
                                expectedModule: 'NarrativeJobService',
                                providedModule: moduleName
                            }
                        }
                    }
                } else {
                    const api = new NarrativeJobService();
                    try {
                        const result = await api.handle(functionName, params);
                        rpcResponse = {
                            id, version,
                            result: [result]
                        }
                    } catch (ex) {
                        if (ex instanceof JSONRPC11Exception) {
                            rpcResponse = {
                                id, version,
                                error: ex.toJSON()
                            }
                        } else {
                            throw ex;
                        }
                    }
                }
            }
        }
    } catch (ex) {
        let exceptionMessage: string;
        let exceptionType: string;
        let trace: Array<string> | undefined;
        if (ex instanceof Error) {
            exceptionMessage = ex.message;
            exceptionType = ex.name;
            trace = ex.stack ? ex.stack.split('\n') : undefined;
        } else {
            exceptionMessage = String(ex);
            exceptionType = typeof ex;
            trace = undefined;
        }
        rpcResponse = {
            id: null,
            version: "1.1",
            error: {
                code: -32603,
                message: 'Unknown Internal error',
                data: {
                    exceptionType, exceptionMessage,
                    stackTrace: trace
                }
            }
        }
    }

    response.setHeader('content-type', 'application/json');
    response.send(JSON.stringify(rpcResponse));
});

app.listen(3001, () => {
    console.log('REST server listening on port 3001');
});
